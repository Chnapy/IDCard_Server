/*
 * This file is generated by jOOQ.
*/
package bdd.generated.tables;


import bdd.generated.Keys;
import bdd.generated.Public;
import bdd.generated.tables.records.TypechiffrageRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Typechiffrage extends TableImpl<TypechiffrageRecord> {

    private static final long serialVersionUID = -854230163;

    /**
     * The reference instance of <code>public.typechiffrage</code>
     */
    public static final Typechiffrage TYPECHIFFRAGE = new Typechiffrage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypechiffrageRecord> getRecordType() {
        return TypechiffrageRecord.class;
    }

    /**
     * The column <code>public.typechiffrage.id_typechiffrage</code>.
     */
    public final TableField<TypechiffrageRecord, Integer> ID_TYPECHIFFRAGE = createField("id_typechiffrage", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.typechiffrage.typechiffrage</code>.
     */
    public final TableField<TypechiffrageRecord, String> TYPECHIFFRAGE_ = createField("typechiffrage", org.jooq.impl.SQLDataType.VARCHAR.length(16).nullable(false), this, "");

    /**
     * Create a <code>public.typechiffrage</code> table reference
     */
    public Typechiffrage() {
        this("typechiffrage", null);
    }

    /**
     * Create an aliased <code>public.typechiffrage</code> table reference
     */
    public Typechiffrage(String alias) {
        this(alias, TYPECHIFFRAGE);
    }

    private Typechiffrage(String alias, Table<TypechiffrageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Typechiffrage(String alias, Table<TypechiffrageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TypechiffrageRecord> getPrimaryKey() {
        return Keys.TYPECHIFFRAGE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TypechiffrageRecord>> getKeys() {
        return Arrays.<UniqueKey<TypechiffrageRecord>>asList(Keys.TYPECHIFFRAGE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Typechiffrage as(String alias) {
        return new Typechiffrage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Typechiffrage rename(String name) {
        return new Typechiffrage(name, null);
    }
}
