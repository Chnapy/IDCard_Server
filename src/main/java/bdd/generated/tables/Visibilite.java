/*
 * This file is generated by jOOQ.
*/
package bdd.generated.tables;


import bdd.generated.Keys;
import bdd.generated.Public;
import bdd.generated.tables.records.VisibiliteRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Visibilite extends TableImpl<VisibiliteRecord> {

    private static final long serialVersionUID = -97683399;

    /**
     * The reference instance of <code>public.visibilite</code>
     */
    public static final Visibilite VISIBILITE = new Visibilite();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VisibiliteRecord> getRecordType() {
        return VisibiliteRecord.class;
    }

    /**
     * The column <code>public.visibilite.id_valeur</code>.
     */
    public final TableField<VisibiliteRecord, Long> ID_VALEUR = createField("id_valeur", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.visibilite.id_domaine</code>.
     */
    public final TableField<VisibiliteRecord, Long> ID_DOMAINE = createField("id_domaine", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.visibilite</code> table reference
     */
    public Visibilite() {
        this("visibilite", null);
    }

    /**
     * Create an aliased <code>public.visibilite</code> table reference
     */
    public Visibilite(String alias) {
        this(alias, VISIBILITE);
    }

    private Visibilite(String alias, Table<VisibiliteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Visibilite(String alias, Table<VisibiliteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<VisibiliteRecord> getPrimaryKey() {
        return Keys.VISIBILITE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<VisibiliteRecord>> getKeys() {
        return Arrays.<UniqueKey<VisibiliteRecord>>asList(Keys.VISIBILITE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<VisibiliteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<VisibiliteRecord, ?>>asList(Keys.VISIBILITE__VALEUR_VISIBILITE_FK, Keys.VISIBILITE__DOMAINE_VISIBILITE_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Visibilite as(String alias) {
        return new Visibilite(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Visibilite rename(String name) {
        return new Visibilite(name, null);
    }
}
