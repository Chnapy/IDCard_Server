/*
 * This file is generated by jOOQ.
*/
package bdd.generated.tables;


import bdd.generated.Keys;
import bdd.generated.Public;
import bdd.generated.tables.records.ProprieteRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Propriete extends TableImpl<ProprieteRecord> {

    private static final long serialVersionUID = 1050815445;

    /**
     * The reference instance of <code>public.propriete</code>
     */
    public static final Propriete PROPRIETE = new Propriete();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProprieteRecord> getRecordType() {
        return ProprieteRecord.class;
    }

    /**
     * The column <code>public.propriete.id_propriete</code>.
     */
    public final TableField<ProprieteRecord, Long> ID_PROPRIETE = createField("id_propriete", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('propriete_id_propriete_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.propriete.supprimable</code>.
     */
    public final TableField<ProprieteRecord, Boolean> SUPPRIMABLE = createField("supprimable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.propriete.modifiable</code>.
     */
    public final TableField<ProprieteRecord, Boolean> MODIFIABLE = createField("modifiable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.propriete.nom</code>.
     */
    public final TableField<ProprieteRecord, String> NOM = createField("nom", org.jooq.impl.SQLDataType.VARCHAR.length(64).nullable(false), this, "");

    /**
     * The column <code>public.propriete.nbrvalmin</code>.
     */
    public final TableField<ProprieteRecord, Integer> NBRVALMIN = createField("nbrvalmin", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.propriete.nbrvalmax</code>.
     */
    public final TableField<ProprieteRecord, Integer> NBRVALMAX = createField("nbrvalmax", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.propriete.taillevalmin</code>.
     */
    public final TableField<ProprieteRecord, Integer> TAILLEVALMIN = createField("taillevalmin", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.propriete.taillevalmax</code>.
     */
    public final TableField<ProprieteRecord, Integer> TAILLEVALMAX = createField("taillevalmax", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.propriete.id_typeprop</code>.
     */
    public final TableField<ProprieteRecord, Integer> ID_TYPEPROP = createField("id_typeprop", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.propriete</code> table reference
     */
    public Propriete() {
        this("propriete", null);
    }

    /**
     * Create an aliased <code>public.propriete</code> table reference
     */
    public Propriete(String alias) {
        this(alias, PROPRIETE);
    }

    private Propriete(String alias, Table<ProprieteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Propriete(String alias, Table<ProprieteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProprieteRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROPRIETE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProprieteRecord> getPrimaryKey() {
        return Keys.PROPRIETE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProprieteRecord>> getKeys() {
        return Arrays.<UniqueKey<ProprieteRecord>>asList(Keys.PROPRIETE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProprieteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProprieteRecord, ?>>asList(Keys.PROPRIETE__TYPEPROP_PROPRIETE_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Propriete as(String alias) {
        return new Propriete(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Propriete rename(String name) {
        return new Propriete(name, null);
    }
}
