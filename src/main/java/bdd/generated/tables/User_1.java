/*
 * This file is generated by jOOQ.
 */
package bdd.generated.tables;

import bdd.generated.Keys;
import bdd.generated.Public;
import bdd.generated.tables.records.User_1Record;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
		value = {
			"http://www.jooq.org",
			"jOOQ version:3.9.1"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class User_1 extends TableImpl<User_1Record> {

	private static final long serialVersionUID = -1462987013;

	/**
	 * The reference instance of <code>public.user_1</code>
	 */
	public static final User_1 USER_1 = new User_1();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<User_1Record> getRecordType() {
		return User_1Record.class;
	}

	/**
	 * The column <code>public.user_1.id_user</code>.
	 */
	public final TableField<User_1Record, Long> ID_USER = createField("id_user", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('user_1_id_user_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>public.user_1.dateinscription</code>.
	 */
	public final TableField<User_1Record, Date> DATEINSCRIPTION = createField("dateinscription", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

	/**
	 * The column <code>public.user_1.datederniereconnexion</code>.
	 */
	public final TableField<User_1Record, Date> DATEDERNIERECONNEXION = createField("datederniereconnexion", org.jooq.impl.SQLDataType.DATE, this, "");

	/**
	 * The column <code>public.user_1.nbrconnexion</code>.
	 */
	public final TableField<User_1Record, Long> NBRCONNEXION = createField("nbrconnexion", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

	/**
	 * Create a <code>public.user_1</code> table reference
	 */
	public User_1() {
		this("user_1", null);
	}

	/**
	 * Create an aliased <code>public.user_1</code> table reference
	 */
	public User_1(String alias) {
		this(alias, USER_1);
	}

	private User_1(String alias, Table<User_1Record> aliased) {
		this(alias, aliased, null);
	}

	private User_1(String alias, Table<User_1Record> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return Public.PUBLIC;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<User_1Record, Long> getIdentity() {
		return Keys.IDENTITY_USER_1;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<User_1Record> getPrimaryKey() {
		return Keys.USER_1_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<User_1Record>> getKeys() {
		return Arrays.<UniqueKey<User_1Record>>asList(Keys.USER_1_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public User_1 as(String alias) {
		return new User_1(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public User_1 rename(String name) {
		return new User_1(name, null);
	}
}
