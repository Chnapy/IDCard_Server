/*
 * This file is generated by jOOQ.
 */
package bdd.generated.tables;

import bdd.generated.Keys;
import bdd.generated.Public;
import bdd.generated.tables.records.SessionpropRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
		value = {
			"http://www.jooq.org",
			"jOOQ version:3.9.1"
		},
		comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Sessionprop extends TableImpl<SessionpropRecord> {

	private static final long serialVersionUID = -556640120;

	/**
	 * The reference instance of <code>public.sessionprop</code>
	 */
	public static final Sessionprop SESSIONPROP = new Sessionprop();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SessionpropRecord> getRecordType() {
		return SessionpropRecord.class;
	}

	/**
	 * The column <code>public.sessionprop.id_session</code>.
	 */
	public final TableField<SessionpropRecord, Long> ID_SESSION = createField("id_session", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>public.sessionprop.id_propriete</code>.
	 */
	public final TableField<SessionpropRecord, Long> ID_PROPRIETE = createField("id_propriete", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>public.sessionprop.demande</code>.
	 */
	public final TableField<SessionpropRecord, Boolean> DEMANDE = createField("demande", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * The column <code>public.sessionprop.accepte</code>.
	 */
	public final TableField<SessionpropRecord, Boolean> ACCEPTE = createField("accepte", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * Create a <code>public.sessionprop</code> table reference
	 */
	public Sessionprop() {
		this("sessionprop", null);
	}

	/**
	 * Create an aliased <code>public.sessionprop</code> table reference
	 */
	public Sessionprop(String alias) {
		this(alias, SESSIONPROP);
	}

	private Sessionprop(String alias, Table<SessionpropRecord> aliased) {
		this(alias, aliased, null);
	}

	private Sessionprop(String alias, Table<SessionpropRecord> aliased, Field<?>[] parameters) {
		super(alias, null, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return Public.PUBLIC;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SessionpropRecord> getPrimaryKey() {
		return Keys.SESSIONPROP_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SessionpropRecord>> getKeys() {
		return Arrays.<UniqueKey<SessionpropRecord>>asList(Keys.SESSIONPROP_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<SessionpropRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<SessionpropRecord, ?>>asList(Keys.SESSIONPROP__SESSION_SESSIONPROP_FK, Keys.SESSIONPROP__PROPRIETE_SESSIONPROP_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Sessionprop as(String alias) {
		return new Sessionprop(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Sessionprop rename(String name) {
		return new Sessionprop(name, null);
	}
}
